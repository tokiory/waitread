import type { LinkList } from "../types/list.types";

export const LINKS: LinkList = [
    { done: true, source: "ByteGoblin.io", title: "Explaining Common I/O Patterns in Go", url: "https://bytegoblin.io/blog/explaining-common-i-o-patterns-in-go" },
    { done: false, source: "Stanford Education", title: "How Does the Internet Work?", url: "https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper.htm" },
    { done: false, source: "Cloudflare", title: "What is DNS? | How DNS works", url: "https://www.cloudflare.com/en-gb/learning/dns/what-is-dns/" },
    { done: false, source: "Cloudflare", title: "What is a domain name? | Domain name vs. URL", url: "https://www.cloudflare.com/en-gb/learning/dns/glossary/what-is-a-domain-name/" },
    { done: false, source: "MDN", title: "What is a web server?", url: "https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_web_server" },
    { done: false, source: "Dev.to", title: "Fundamentals of REST API", url: "https://dev.to/cassiocappellari/fundamentals-of-rest-api-2nag" },
    { done: false, source: "Wallarm", title: "What Is GRPC? Meaning, Architecture, Advantages", url: "https://www.wallarm.com/what/the-concept-of-grpc" },
    { done: false, source: "W3Schools", title: "XML Soap", url: "https://www.w3schools.com/xml/xml_soap.asp" },
    { done: true, source: "CS.fyi", title: "How Does Intenet Work", url: "https://cs.fyi/guide/how-does-internet-work" },
    { done: true, source: "Meat.io", title: "Цветовая схема OKSolar", url: "https://meat.io/oksolar" },
    { done: true, source: "Evil Martians", title: "OKLCH in CSS: why we moved from RGB and HSL", url: "https://evilmartians.com/chronicles/oklch-in-css-why-quit-rgb-hsl" },
    { done: false, source: "Sky.pro", title: "Понимаем JS идиому var self = this: использование и цель", url: "https://sky.pro/wiki/javascript/ponimaem-js-idiomu-var-self-this-ispolzovanie-i-tsel/" },
    { done: false, source: "Teamten", title: "Java for Everything", url: "https://www.teamten.com/lawrence/writings/java-for-everything.html" },
    { done: false, source: "Habr", title: "Как работает JS: обзор движка, механизмов времени выполнения, стека вызовов", url: "https://habr.com/ru/companies/ruvds/articles/337042/" },
    { done: false, source: "Alex Edwards", title: "Demystifying function parameters in Go", url: "https://www.alexedwards.net/blog/demystifying-function-parameters-in-go" },
    { done: false, source: "Scaler", title: "Threads in Operating System", url: "https://www.scaler.com/topics/operating-system/threads-in-operating-system/" },
    { done: false, source: "Go FAQ", title: "Go FAQ", url: "https://go.dev/doc/faq#Design" },
    { done: false, source: "Dave Cheney", title: "How the Go runtime implements maps efficiently (without generics)", url: "https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics" },
    { done: false, source: "Jenkov", title: "Concurrency Models", url: "https://jenkov.com/tutorials/java-concurrency/concurrency-models.html" },
    { done: false, source: "Dave Cheney", title: "If a map isn’t a reference variable, what is it?", url: "https://dave.cheney.net/2017/04/30/if-a-map-isnt-a-reference-variable-what-is-it" },
    { done: true, source: "Dave Cheney", title: "Should methods be declared on T or *T", url: "https://dave.cheney.net/2016/03/19/should-methods-be-declared-on-t-or-t" },
    { done: true, source: "Airs – Ian Lance Taylor", title: "Go Interfaces", url: "https://www.airs.com/blog/archives/277" },
    { done: false, source: "Chris Siebenmann", title: "Learning about Go's unaddressable values and slicing", url: "https://utcc.utoronto.ca/~cks/space/blog/programming/GoUnaddressableSlice" },
    { done: true, source: "Sazak.io", title: "Visual Guide to Slices in Go", url: "https://sazak.io/articles/visual-guide-to-slices-in-go-2024-03-25" },
    { done: true, source: "Habr", title: "CORS для чайников: история возникновения, как устроен и оптимальные методы работы", url: "https://habr.com/ru/companies/macloud/articles/553826/" },
    { done: false, source: "MDN", title: "Cross-Origin Resource Sharing (CORS)", url: "https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS" },
    { done: false, source: "Victoria Metrics", title: "How Go Arrays Work and Get Tricky with For-Range", url: "https://victoriametrics.com/blog/go-array/" },
    { done: false, source: "CS 225", title: "Stack and Heap Memory", url: "https://courses.grainger.illinois.edu/cs225/fa2022/resources/stack-heap/" },
    { done: false, source: "Sam Who", title: "Memory Allocation", url: "https://samwho.dev/memory-allocation/" },
    { done: false, source: "Medium", title: "Memory Allocation", url: "https://medium.com/@iarsham/stack-and-heap-in-js-c09aeabf3967" },
    { done: true, source: "Medium", title: "Crafting a Custom Hashmap: A Golang Odyssey", url: "https://blog.stackademic.com/crafting-a-custom-hashmap-a-golang-odyssey-00fdfde9a775" },
    { done: true, source: "Alex Edwards", title: "Organising Database Access in Go", url: "https://www.alexedwards.net/blog/organising-database-access" },
    { done: true, source: "Medium", title: "Dependency Injection in Go", url: "https://medium.com/avenue-tech/dependency-injection-in-go-35293ef7b6" },
    { done: false, source: "Dave Cheney", title: "Empty Struct", url: "https://dave.cheney.net/2014/03/25/the-empty-struct" },
    { done: false, source: "Alexey Gronskiy", title: "Summary to the difference between T and *T method sets in Go", url: "https://gronskiy.com/posts/2020-04-golang-pointer-vs-value-methods/" },
    { done: false, source: "Quirksmode", title: "The this keyword", url: "https://www.quirksmode.org/js/this.html" },
    { done: false, source: "Eloquent Javascript", title: "The Secret Life of Objects", url: "https://eloquentjavascript.net/06_object.html" },
    { done: false, source: "Web.dev", title: "How browsers work", url: "https://web.dev/articles/howbrowserswork" },
    { done: false, source: "MDN", title: "An overview of HTTP", url: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview" },
    { done: false, source: "Destroy All Software", title: "Network Protocols For Anyone Who Knows A Programming Language", url: "https://www.destroyallsoftware.com/compendium/network-protocols?share_key=97d3ba4c24d21147" },
    { done: false, source: "Smashing Magazine", title: "HTTP/3 From A To Z: Core Concepts", url: "https://www.smashingmagazine.com/2021/08/http3-core-concepts-part1/" },
    { done: true, source: "Log Rocket", title: "Dockerizing Go Application", url: "https://blog.logrocket.com/dockerizing-go-application/" },
    { done: false, source: "BetterStack", title: "Logging in Go", url: "https://betterstack.com/community/guides/logging/logging-in-go/" },
    { done: false, source: "Digital Ocean", title: "How To Use Contexts in Go", url: "https://www.digitalocean.com/community/tutorials/how-to-use-contexts-in-go" },
    { done: true, source: "Drstearns", title: "Middleware Patterns in Go", url: "https://drstearns.github.io/tutorials/gomiddleware/" },
    { done: true, source: "Alex Edwards", title: "Making and Using HTTP Middleware", url: "https://www.alexedwards.net/blog/making-and-using-middleware" },
    { done: true, source: "Medium", title: "Auto Rebuilding Go Programs — With Docker, Glide & Fresh", url: "https://craig-childs.medium.com/hot-reloading-go-programs-with-docker-glide-fresh-d5f1acb63f72" },
    { done: true, source: "Harrk.dev", title: "Live Reloading A Go Application With Docker", url: "https://harrk.dev/live-reloading-a-go-application-with-docker/" },
    { done: true, source: "Medium", title: "Go projects and docker compose watch", url: "https://lukerogerson.medium.com/go-projects-and-docker-compose-watch-e98af8c497bf" },
    { done: false, source: "Choly's Blog", title: "Go: Composable http.Handler", url: "https://choly.ca/post/go-experiments-with-handler/" },
    { done: false, source: "The Ethically-Trained Programmer", title: "Creating Domain Specific Error Helpers in Go With errors.As", url: "https://blog.carlana.net/post/2020/working-with-errors-as/" },
    { done: false, source: "go.dev", title: "Error handling and Go", url: "https://go.dev/blog/error-handling-and-go" },
    { done: false, source: "Threedots", title: "The Repository pattern in Go: a painless way to simplify your service logic", url: "https://threedots.tech/post/repository-pattern-in-go/" }
];
